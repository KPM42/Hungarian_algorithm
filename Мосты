vec<vec<int>> g;
vec<int> fup, tin;
// fup[i] - время входа в самого верхнего предка в которого можем прийти из  i или детей i
vec<bool> used;
int timer = 0;
void dfs(int v, int p = -1){
    used[v] = true;
    tin[v] = ++timer;
    fup[v] = tin[v];
    for0(i, g[v].size()){
        int to = g[v][i];
        if(to == p)
            continue;
        if(used[to]) // обратное ребро
            fup[v] = min(fup[v], tin[to]);
        else{
            dfs(to, v);
             fup[v] = min(fup[v], fup[to]);//если из детей получили лучший ответ, то обновляем
            if(fup[to] < tin[v]){// не смогли подняться до высоты v
                cout << "most " << v << " " << to << en;
            }
        }
    }
}
